package com.uc_mobileapps.tests.sqlite.bo;

import android.net.Uri;
import android.os.Parcel;
import android.os.Parcelable;

import com.weebmeister.seife.anno.GeneratorOption;
import com.weebmeister.seife.anno.SeifeClass;
import com.weebmeister.seife.anno.SeifeField;

import java.net.URI;
import java.net.URL;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;

/**
 * Created by Klaus on 10.03.2017.
 */
@SeifeClass(
        generatorOptions = {
                GeneratorOption.BOCLASS_PARCELABLE, GeneratorOption.SCHEMA_PEER,
                GeneratorOption.DB_HELPER+"=GeneralTestsDBOpenHelper",
                GeneratorOption.DATA_PROVIDER+"=GeneralTestsProvider"
        })
public class AdvancedTypes implements Parcelable {

    @SeifeField(isPrimaryKey = true)
    private Long id;


    @SeifeField
    private byte[] typeBinary;

    @SeifeField
    private URI typeUri;

    @SeifeField
    private URL typeUrl;

    @SeifeField
    private Uri typeUriAndroid;

    @SeifeField
    private java.sql.Date typeSqlDate;

    @SeifeField
    private Timestamp typeSqlTimestamp;

    @SeifeField
    private Time typeSqlTime;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public byte[] getTypeBinary() {
        return typeBinary;
    }

    public void setTypeBinary(byte[] typeBinary) {
        this.typeBinary = typeBinary;
    }

    public URI getTypeUri() {
        return typeUri;
    }

    public void setTypeUri(URI typeUri) {
        this.typeUri = typeUri;
    }

    public URL getTypeUrl() {
        return typeUrl;
    }

    public void setTypeUrl(URL typeUrl) {
        this.typeUrl = typeUrl;
    }

    public Uri getTypeUriAndroid() {
        return typeUriAndroid;
    }

    public void setTypeUriAndroid(Uri typeUriAndroid) {
        this.typeUriAndroid = typeUriAndroid;
    }

    public Timestamp getTypeSqlTimestamp() {
        return typeSqlTimestamp;
    }

    public void setTypeSqlTimestamp(Timestamp typeSqlTimestamp) {
        this.typeSqlTimestamp = typeSqlTimestamp;
    }

    public Time getTypeSqlTime() {
        return typeSqlTime;
    }

    public void setTypeSqlTime(Time typeSqlTime) {
        this.typeSqlTime = typeSqlTime;
    }

    public Date getTypeSqlDate() {
        return typeSqlDate;
    }

    public void setTypeSqlDate(Date typeSqlDate) {
        this.typeSqlDate = typeSqlDate;
    }
	//[begin seife autogenerated@


	public static final String PARCELABLE_NAME = "com.uc_mobileapps.tests.sqlite.bo.AdvancedTypes";
	public static final Parcelable.Creator<AdvancedTypes> CREATOR = new Parcelable.Creator<AdvancedTypes>() {

		@Override
		public AdvancedTypes createFromParcel(Parcel source) 
		{
			AdvancedTypes instance = new AdvancedTypes();
			instance.readFromParcel(source);
			return instance;
		}

		@Override
		public AdvancedTypes[] newArray(int size) {
			return new AdvancedTypes[size];
		}	
	};

	@Override
	public int describeContents() { //relevant to parcel filedescriptors only, leave zero
		return 0;
	}
	

	public void readFromParcel(Parcel source) {
		String s;
		s=source.readString(); id = (s!=null) ? Long.parseLong(s) : null;
		typeBinary = source.createByteArray();
		s=source.readString(); typeSqlDate = (s!=null) ? new java.sql.Date(Long.parseLong(s)) : null;
		s=source.readString(); typeSqlTime = (s!=null) ? new java.sql.Time(Long.parseLong(s)) : null;
		s=source.readString();
		if (s!=null) {
			typeSqlTimestamp = new java.sql.Timestamp(Long.parseLong(s));
			typeSqlTimestamp.setNanos(source.readInt());
		} else {
			typeSqlTimestamp=null;
		}
		s=source.readString(); typeUri = (s!=null) ? java.net.URI.create(s) : null;
		s=source.readString(); typeUriAndroid = (s!=null) ? android.net.Uri.parse(s) : null;
		s=source.readString(); try { typeUrl = (s!=null) ? new java.net.URL(s) : null; } catch (java.net.MalformedURLException e) { throw new IllegalArgumentException(e); }
	}


	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeString((id!=null) ? Long.toString(id) : null);
		dest.writeByteArray(typeBinary);
		dest.writeString((typeSqlDate!=null) ? Long.toString(typeSqlDate.getTime()) : null);
		dest.writeString((typeSqlTime!=null) ? Long.toString(typeSqlTime.getTime()) : null);
		if (typeSqlTimestamp!=null) {
			dest.writeString(Long.toString(typeSqlTimestamp.getTime()));
			dest.writeInt(typeSqlTimestamp.getNanos());
		} else {
			dest.writeString(null);
		}
		dest.writeString((typeUri!=null) ? typeUri.toString() : null);
		dest.writeString((typeUriAndroid!=null) ? typeUriAndroid.toString() : null);
		dest.writeString((typeUrl!=null) ? typeUrl.toString() : null);
	}
		//@end seife autogenerated]

}
