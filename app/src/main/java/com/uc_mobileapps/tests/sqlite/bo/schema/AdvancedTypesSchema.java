package com.uc_mobileapps.tests.sqlite.bo.schema;
import android.content.ContentValues;
import android.database.Cursor;

import com.uc_mobileapps.tests.sqlite.bo.AdvancedTypes;

import java.util.ArrayList;
import java.util.List;

public class AdvancedTypesSchema { 
	//[begin seife autogenerated@

	/**
	 * Table name of the AdvancedTypes table
	 */
	public static String TBL_ADVANCED_TYPES = "advancedTypes";
	

	public static String COL_ID = "id";

	public static String COL_TYPE_BINARY = "typeBinary";

	public static String COL_TYPE_SQL_DATE = "typeSqlDate";

	public static String COL_TYPE_SQL_TIME = "typeSqlTime";

	public static String COL_TYPE_SQL_TIMESTAMP = "typeSqlTimestamp";

	public static String COL_TYPE_URI = "typeUri";

	public static String COL_TYPE_URI_ANDROID = "typeUriAndroid";

	public static String COL_TYPE_URL = "typeUrl";

	/** Fully qualified column name of {@link #COL_ID */
	public static String COL_ID_FQN = "advancedTypes.id";

	/** Fully qualified column name of {@link #COL_TYPE_BINARY */
	public static String COL_TYPE_BINARY_FQN = "advancedTypes.typeBinary";

	/** Fully qualified column name of {@link #COL_TYPE_SQL_DATE */
	public static String COL_TYPE_SQL_DATE_FQN = "advancedTypes.typeSqlDate";

	/** Fully qualified column name of {@link #COL_TYPE_SQL_TIME */
	public static String COL_TYPE_SQL_TIME_FQN = "advancedTypes.typeSqlTime";

	/** Fully qualified column name of {@link #COL_TYPE_SQL_TIMESTAMP */
	public static String COL_TYPE_SQL_TIMESTAMP_FQN = "advancedTypes.typeSqlTimestamp";

	/** Fully qualified column name of {@link #COL_TYPE_URI */
	public static String COL_TYPE_URI_FQN = "advancedTypes.typeUri";

	/** Fully qualified column name of {@link #COL_TYPE_URI_ANDROID */
	public static String COL_TYPE_URI_ANDROID_FQN = "advancedTypes.typeUriAndroid";

	/** Fully qualified column name of {@link #COL_TYPE_URL */
	public static String COL_TYPE_URL_FQN = "advancedTypes.typeUrl";
	
	/**
	 * All columns
	 */
	public static String[] COLUMNS = new String[] { COL_ID, COL_TYPE_BINARY, COL_TYPE_SQL_DATE, COL_TYPE_SQL_TIME, COL_TYPE_SQL_TIMESTAMP, COL_TYPE_URI, COL_TYPE_URI_ANDROID, COL_TYPE_URL	};

	/**
	 * Table creation script
	 */
	public static final String SQL_CREATE_TABLE_ADVANCED_TYPES =
			"create table " + TBL_ADVANCED_TYPES + " (" +
					COL_ID + " integer primary key autoincrement," +
					COL_TYPE_BINARY + " blob," +
					COL_TYPE_SQL_DATE + " integer," +
					COL_TYPE_SQL_TIME + " integer," +
					COL_TYPE_SQL_TIMESTAMP + " integer," +
					COL_TYPE_URI + " text," +
					COL_TYPE_URI_ANDROID + " text," +
					COL_TYPE_URL + " text" +
					")";


 

	private static AdvancedTypesSchema schema = new AdvancedTypesSchema();
	public static AdvancedTypesSchema instance() {
		return schema;
	}

	/**
	 * Checks for mandatory constraints defined on fields
	 */
	public boolean checkConstraints(ContentValues contentValues) {
		return true;
	}
	
	/**
	 * Gets all attribute values of the bo as key value pairs
	 * @param bo may not be null
	 * @return new instance of {@link ContentValues}
	 */
	public ContentValues getContentValues(AdvancedTypes bo) {
		ContentValues contentValues = new ContentValues();

		if (bo.getId() != null) {
			contentValues.put(COL_ID, bo.getId());
		}
		contentValues.put(COL_TYPE_BINARY, bo.getTypeBinary());
		contentValues.put(COL_TYPE_SQL_DATE, (bo.getTypeSqlDate()!=null) ? bo.getTypeSqlDate().getTime() : null);
		contentValues.put(COL_TYPE_SQL_TIME, (bo.getTypeSqlTime()!=null) ? bo.getTypeSqlTime().getTime() : null);
		contentValues.put(COL_TYPE_SQL_TIMESTAMP, (bo.getTypeSqlTimestamp()!=null) ? Long.valueOf(bo.getTypeSqlTimestamp().getTime()*1000000+bo.getTypeSqlTimestamp().getNanos()%1000000) : null);
		contentValues.put(COL_TYPE_URI, (bo.getTypeUri()!=null) ? bo.getTypeUri().toString() : null);
		contentValues.put(COL_TYPE_URI_ANDROID, (bo.getTypeUriAndroid()!=null) ? bo.getTypeUriAndroid().toString() : null);
		contentValues.put(COL_TYPE_URL, (bo.getTypeUrl()!=null) ? bo.getTypeUrl().toString() : null);
		return contentValues;
	}

	/**
	 * Sets all attributes from the cursor
	 * @param cursorFrom the cursor to read from
	 * @param bo may be null
	 * @return the bo passed as a parameter or a new instance
	 */
	public AdvancedTypes readFromCursor(Cursor cursorFrom, AdvancedTypes bo)
	{
		if (bo == null) {
			bo = new AdvancedTypes();
		}
		final Cursor c = cursorFrom; 

		bo.setId(c.isNull(c.getColumnIndex(COL_ID)) ? null : c.getLong(c.getColumnIndex(COL_ID)));
		bo.setTypeBinary(c.getBlob(c.getColumnIndex(COL_TYPE_BINARY)));
		bo.setTypeSqlDate(c.isNull(c.getColumnIndex(COL_TYPE_SQL_DATE)) ? null : new java.sql.Date(c.getLong(c.getColumnIndex(COL_TYPE_SQL_DATE))));
		bo.setTypeSqlTime(c.isNull(c.getColumnIndex(COL_TYPE_SQL_TIME)) ? null : new java.sql.Time(c.getLong(c.getColumnIndex(COL_TYPE_SQL_TIME))));
		if (c.isNull(c.getColumnIndex(COL_TYPE_SQL_TIMESTAMP))) {
			bo.setTypeSqlTimestamp(null);
		} else {
			long timeNanos = c.getLong(c.getColumnIndex(COL_TYPE_SQL_TIMESTAMP));
			java.sql.Timestamp sqlTimestamp = new java.sql.Timestamp(timeNanos / 1000000);
			sqlTimestamp.setNanos((int)timeNanos % 1000000);
			bo.setTypeSqlTimestamp(sqlTimestamp);
		}
		bo.setTypeUri(c.isNull(c.getColumnIndex(COL_TYPE_URI)) ? null : java.net.URI.create(c.getString(c.getColumnIndex(COL_TYPE_URI))));
		bo.setTypeUriAndroid(c.isNull(c.getColumnIndex(COL_TYPE_URI_ANDROID)) ? null : android.net.Uri.parse(c.getString(c.getColumnIndex(COL_TYPE_URI_ANDROID))));
		try { bo.setTypeUrl(c.isNull(c.getColumnIndex(COL_TYPE_URL)) ? null : java.net.URI.create(c.getString(c.getColumnIndex(COL_TYPE_URL))).toURL()); } catch (java.net.MalformedURLException e) { throw new IllegalArgumentException(e); }
		return bo;
	}
	
	
	/**
	 * @return hard-coded table creation and index scripts
	 */
	public List<String> getTableScripts() {
		List<String> result = new ArrayList<String>();
		result.add(SQL_CREATE_TABLE_ADVANCED_TYPES); 
		return result;
	}

 
	//@end seife autogenerated]

	
}
