package com.uc_mobileapps.tests.sqlite.bo.schema;
import android.content.ContentValues;
import android.database.Cursor;

import com.uc_mobileapps.tests.sqlite.bo.CommonTypes;

import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;
import java.util.Date;

public class CommonTypesSchema { 
	//[begin seife autogenerated@

	/**
	 * Table name of the CommonTypes table
	 */
	public static String TBL_COMMON_TYPES = "commonTypes";
	

	public static String COL_ID = "id";

	public static String COL_TYPE_BOOLEAN = "typeBoolean";

	public static String COL_TYPE_BYTE = "typeByte";

	public static String COL_TYPE_DOUBLE = "typeDouble";

	public static String COL_TYPE_FLOAT = "typeFloat";

	public static String COL_TYPE_INT = "typeInt";

	public static String COL_TYPE_LONG = "typeLong";

	public static String COL_TYPE_NULLABLE_BOOLEAN = "typeNullableBoolean";

	public static String COL_TYPE_NULLABLE_BYTE = "typeNullableByte";

	public static String COL_TYPE_NULLABLE_DOUBLE = "typeNullableDouble";

	public static String COL_TYPE_NULLABLE_FLOAT = "typeNullableFloat";

	public static String COL_TYPE_NULLABLE_INT = "typeNullableInt";

	public static String COL_TYPE_NULLABLE_LONG = "typeNullableLong";

	public static String COL_TYPE_NULLABLE_SHORT = "typeNullableShort";

	public static String COL_TYPE_SHORT = "typeShort";

	public static String COL_TYPE_STRING = "typeString";

	public static String COL_TYPE_UTIL_DATE = "typeUtilDate";

	/** Fully qualified column name of {@link #COL_ID */
	public static String COL_ID_FQN = "commonTypes.id";

	/** Fully qualified column name of {@link #COL_TYPE_BOOLEAN */
	public static String COL_TYPE_BOOLEAN_FQN = "commonTypes.typeBoolean";

	/** Fully qualified column name of {@link #COL_TYPE_BYTE */
	public static String COL_TYPE_BYTE_FQN = "commonTypes.typeByte";

	/** Fully qualified column name of {@link #COL_TYPE_DOUBLE */
	public static String COL_TYPE_DOUBLE_FQN = "commonTypes.typeDouble";

	/** Fully qualified column name of {@link #COL_TYPE_FLOAT */
	public static String COL_TYPE_FLOAT_FQN = "commonTypes.typeFloat";

	/** Fully qualified column name of {@link #COL_TYPE_INT */
	public static String COL_TYPE_INT_FQN = "commonTypes.typeInt";

	/** Fully qualified column name of {@link #COL_TYPE_LONG */
	public static String COL_TYPE_LONG_FQN = "commonTypes.typeLong";

	/** Fully qualified column name of {@link #COL_TYPE_NULLABLE_BOOLEAN */
	public static String COL_TYPE_NULLABLE_BOOLEAN_FQN = "commonTypes.typeNullableBoolean";

	/** Fully qualified column name of {@link #COL_TYPE_NULLABLE_BYTE */
	public static String COL_TYPE_NULLABLE_BYTE_FQN = "commonTypes.typeNullableByte";

	/** Fully qualified column name of {@link #COL_TYPE_NULLABLE_DOUBLE */
	public static String COL_TYPE_NULLABLE_DOUBLE_FQN = "commonTypes.typeNullableDouble";

	/** Fully qualified column name of {@link #COL_TYPE_NULLABLE_FLOAT */
	public static String COL_TYPE_NULLABLE_FLOAT_FQN = "commonTypes.typeNullableFloat";

	/** Fully qualified column name of {@link #COL_TYPE_NULLABLE_INT */
	public static String COL_TYPE_NULLABLE_INT_FQN = "commonTypes.typeNullableInt";

	/** Fully qualified column name of {@link #COL_TYPE_NULLABLE_LONG */
	public static String COL_TYPE_NULLABLE_LONG_FQN = "commonTypes.typeNullableLong";

	/** Fully qualified column name of {@link #COL_TYPE_NULLABLE_SHORT */
	public static String COL_TYPE_NULLABLE_SHORT_FQN = "commonTypes.typeNullableShort";

	/** Fully qualified column name of {@link #COL_TYPE_SHORT */
	public static String COL_TYPE_SHORT_FQN = "commonTypes.typeShort";

	/** Fully qualified column name of {@link #COL_TYPE_STRING */
	public static String COL_TYPE_STRING_FQN = "commonTypes.typeString";

	/** Fully qualified column name of {@link #COL_TYPE_UTIL_DATE */
	public static String COL_TYPE_UTIL_DATE_FQN = "commonTypes.typeUtilDate";
	
	/**
	 * All columns
	 */
	public static String[] COLUMNS = new String[] { COL_ID, COL_TYPE_BOOLEAN, COL_TYPE_BYTE, COL_TYPE_DOUBLE, COL_TYPE_FLOAT, COL_TYPE_INT, COL_TYPE_LONG, COL_TYPE_NULLABLE_BOOLEAN, COL_TYPE_NULLABLE_BYTE, COL_TYPE_NULLABLE_DOUBLE, COL_TYPE_NULLABLE_FLOAT, COL_TYPE_NULLABLE_INT, COL_TYPE_NULLABLE_LONG, COL_TYPE_NULLABLE_SHORT, COL_TYPE_SHORT, COL_TYPE_STRING, COL_TYPE_UTIL_DATE	};

	/**
	 * Table creation script
	 */
	public static final String SQL_CREATE_TABLE_COMMON_TYPES =
			"create table " + TBL_COMMON_TYPES + " (" +
					COL_ID + " integer primary key autoincrement," +
					COL_TYPE_BOOLEAN + " integer not null," +
					COL_TYPE_BYTE + " integer not null," +
					COL_TYPE_DOUBLE + " real not null," +
					COL_TYPE_FLOAT + " real not null," +
					COL_TYPE_INT + " integer not null," +
					COL_TYPE_LONG + " integer not null," +
					COL_TYPE_NULLABLE_BOOLEAN + " integer," +
					COL_TYPE_NULLABLE_BYTE + " integer," +
					COL_TYPE_NULLABLE_DOUBLE + " real," +
					COL_TYPE_NULLABLE_FLOAT + " real," +
					COL_TYPE_NULLABLE_INT + " integer," +
					COL_TYPE_NULLABLE_LONG + " integer," +
					COL_TYPE_NULLABLE_SHORT + " integer," +
					COL_TYPE_SHORT + " integer not null," +
					COL_TYPE_STRING + " text," +
					COL_TYPE_UTIL_DATE + " integer" +
					")";


 

	private static CommonTypesSchema schema = new CommonTypesSchema();
	public static CommonTypesSchema instance() {
		return schema;
	}

	/**
	 * Checks for mandatory constraints defined on fields
	 */
	public boolean checkConstraints(ContentValues contentValues) {
		if (null == contentValues.get(COL_TYPE_BOOLEAN)) {
			return false;
		}
		if (null == contentValues.get(COL_TYPE_BYTE)) {
			return false;
		}
		if (null == contentValues.get(COL_TYPE_DOUBLE)) {
			return false;
		}
		if (null == contentValues.get(COL_TYPE_FLOAT)) {
			return false;
		}
		if (null == contentValues.get(COL_TYPE_INT)) {
			return false;
		}
		if (null == contentValues.get(COL_TYPE_LONG)) {
			return false;
		}
		if (null == contentValues.get(COL_TYPE_SHORT)) {
			return false;
		}
		return true;
	}
	
	/**
	 * Gets all attribute values of the bo as key value pairs
	 * @param bo may not be null
	 * @return new instance of {@link ContentValues}
	 */
	public ContentValues getContentValues(CommonTypes bo) {
		ContentValues contentValues = new ContentValues();

		if (bo.getId() != null) {
			contentValues.put(COL_ID, bo.getId());
		}
		contentValues.put(COL_TYPE_BOOLEAN, bo.isTypeBoolean() ? 1 : 0);
		contentValues.put(COL_TYPE_BYTE, bo.getTypeByte());
		contentValues.put(COL_TYPE_DOUBLE, bo.getTypeDouble());
		contentValues.put(COL_TYPE_FLOAT, bo.getTypeFloat());
		contentValues.put(COL_TYPE_INT, bo.getTypeInt());
		contentValues.put(COL_TYPE_LONG, bo.getTypeLong());
		contentValues.put(COL_TYPE_NULLABLE_BOOLEAN, bo.getTypeNullableBoolean());
		contentValues.put(COL_TYPE_NULLABLE_BYTE, bo.getTypeNullableByte());
		contentValues.put(COL_TYPE_NULLABLE_DOUBLE, bo.getTypeNullableDouble());
		contentValues.put(COL_TYPE_NULLABLE_FLOAT, bo.getTypeNullableFloat());
		contentValues.put(COL_TYPE_NULLABLE_INT, bo.getTypeNullableInt());
		contentValues.put(COL_TYPE_NULLABLE_LONG, bo.getTypeNullableLong());
		contentValues.put(COL_TYPE_NULLABLE_SHORT, bo.getTypeNullableShort());
		contentValues.put(COL_TYPE_SHORT, bo.getTypeShort());
		contentValues.put(COL_TYPE_STRING, bo.getTypeString());
		contentValues.put(COL_TYPE_UTIL_DATE, (bo.getTypeUtilDate()!=null) ? bo.getTypeUtilDate().getTime() : null);
		return contentValues;
	}

	/**
	 * Sets all attributes from the cursor
	 * @param cursorFrom the cursor to read from
	 * @param bo may be null
	 * @return the bo passed as a parameter or a new instance
	 */
	public CommonTypes readFromCursor(Cursor cursorFrom, CommonTypes bo)
	{
		if (bo == null) {
			bo = new CommonTypes();
		}
		final Cursor c = cursorFrom; 

		bo.setId(c.isNull(c.getColumnIndex(COL_ID)) ? null : c.getLong(c.getColumnIndex(COL_ID)));
		bo.setTypeBoolean(c.getInt(c.getColumnIndex(COL_TYPE_BOOLEAN))>0);
		bo.setTypeByte((byte)c.getShort(c.getColumnIndex(COL_TYPE_BYTE)));
		bo.setTypeDouble(c.getDouble(c.getColumnIndex(COL_TYPE_DOUBLE)));
		bo.setTypeFloat(c.getFloat(c.getColumnIndex(COL_TYPE_FLOAT)));
		bo.setTypeInt(c.getInt(c.getColumnIndex(COL_TYPE_INT)));
		bo.setTypeLong(c.getLong(c.getColumnIndex(COL_TYPE_LONG)));
		bo.setTypeNullableBoolean(c.isNull(c.getColumnIndex(COL_TYPE_NULLABLE_BOOLEAN)) ? null : c.getInt(c.getColumnIndex(COL_TYPE_NULLABLE_BOOLEAN))>0);
		bo.setTypeNullableByte(c.isNull(c.getColumnIndex(COL_TYPE_NULLABLE_BYTE)) ? null : Byte.valueOf((byte)c.getShort(c.getColumnIndex(COL_TYPE_NULLABLE_BYTE))));
		bo.setTypeNullableDouble(c.isNull(c.getColumnIndex(COL_TYPE_NULLABLE_DOUBLE)) ? null : c.getDouble(c.getColumnIndex(COL_TYPE_NULLABLE_DOUBLE)));
		bo.setTypeNullableFloat(c.isNull(c.getColumnIndex(COL_TYPE_NULLABLE_FLOAT)) ? null : c.getFloat(c.getColumnIndex(COL_TYPE_NULLABLE_FLOAT)));
		bo.setTypeNullableInt(c.isNull(c.getColumnIndex(COL_TYPE_NULLABLE_INT)) ? null : c.getInt(c.getColumnIndex(COL_TYPE_NULLABLE_INT)));
		bo.setTypeNullableLong(c.isNull(c.getColumnIndex(COL_TYPE_NULLABLE_LONG)) ? null : c.getLong(c.getColumnIndex(COL_TYPE_NULLABLE_LONG)));
		bo.setTypeNullableShort(c.isNull(c.getColumnIndex(COL_TYPE_NULLABLE_SHORT)) ? null : c.getShort(c.getColumnIndex(COL_TYPE_NULLABLE_SHORT)));
		bo.setTypeShort(c.getShort(c.getColumnIndex(COL_TYPE_SHORT)));
		bo.setTypeString(c.getString(c.getColumnIndex(COL_TYPE_STRING)));
		bo.setTypeUtilDate(c.isNull(c.getColumnIndex(COL_TYPE_UTIL_DATE)) ? null : new java.util.Date(c.getLong(c.getColumnIndex(COL_TYPE_UTIL_DATE))));
		return bo;
	}
	
	
	/**
	 * @return hard-coded table creation and index scripts
	 */
	public List<String> getTableScripts() {
		List<String> result = new ArrayList<String>();
		result.add(SQL_CREATE_TABLE_COMMON_TYPES); 
		return result;
	}

 
	//@end seife autogenerated]




	
}
