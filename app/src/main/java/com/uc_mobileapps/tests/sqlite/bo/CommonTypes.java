package com.uc_mobileapps.tests.sqlite.bo;

import android.os.Parcel;
import android.os.Parcelable;

import com.weebmeister.seife.anno.GeneratorOption;
import com.weebmeister.seife.anno.SeifeClass;
import com.weebmeister.seife.anno.SeifeField;

import java.util.Date;

import android.content.Context;

/**
 * Created by Klaus on 10.03.2017.
 */
@SeifeClass(
        generatorOptions = {
                GeneratorOption.BOCLASS_PARCELABLE, GeneratorOption.SCHEMA_PEER,
                GeneratorOption.DB_HELPER+"=GeneralTestsDBOpenHelper",
                GeneratorOption.DATA_PROVIDER+"=GeneralTestsProvider"
        })
public class CommonTypes implements Parcelable{

    @SeifeField(isPrimaryKey = true)
    private Long id;

    @SeifeField
    private String typeString;

    @SeifeField
    private byte typeByte;

    @SeifeField
    private Byte typeNullableByte;

    @SeifeField
    private short typeShort;

    @SeifeField
    private Short typeNullableShort;

    @SeifeField
    private int typeInt;

    @SeifeField
    private Integer typeNullableInt;

    @SeifeField
    private long typeLong;

    @SeifeField
    private Long typeNullableLong;

    @SeifeField
    private Date typeUtilDate;

    @SeifeField
    private boolean typeBoolean;

    @SeifeField
    private Boolean typeNullableBoolean;

    @SeifeField
    private float typeFloat;

    @SeifeField
    private Float typeNullableFloat;

    @SeifeField
    private double typeDouble;

    @SeifeField
    private Double typeNullableDouble;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTypeString() {
        return typeString;
    }

    public void setTypeString(String typeString) {
        this.typeString = typeString;
    }

    public byte getTypeByte() {
        return typeByte;
    }

    public void setTypeByte(byte typeByte) {
        this.typeByte = typeByte;
    }

    public short getTypeShort() {
        return typeShort;
    }

    public void setTypeShort(short typeShort) {
        this.typeShort = typeShort;
    }

    public Short getTypeNullableShort() {
        return typeNullableShort;
    }

    public void setTypeNullableShort(Short typeNullableShort) {
        this.typeNullableShort = typeNullableShort;
    }

    public Byte getTypeNullableByte() {
        return typeNullableByte;
    }

    public void setTypeNullableByte(Byte typeNullableByte) {
        this.typeNullableByte = typeNullableByte;
    }

    public int getTypeInt() {
        return typeInt;
    }

    public void setTypeInt(int typeInt) {
        this.typeInt = typeInt;
    }

    public Integer getTypeNullableInt() {
        return typeNullableInt;
    }

    public void setTypeNullableInt(Integer typeNullableInt) {
        this.typeNullableInt = typeNullableInt;
    }

    public long getTypeLong() {
        return typeLong;
    }

    public void setTypeLong(long typeLong) {
        this.typeLong = typeLong;
    }

    public Long getTypeNullableLong() {
        return typeNullableLong;
    }

    public void setTypeNullableLong(Long typeNullableLong) {
        this.typeNullableLong = typeNullableLong;
    }

    public Date getTypeUtilDate() {
        return typeUtilDate;
    }

    public void setTypeUtilDate(Date typeUtilDate) {
        this.typeUtilDate = typeUtilDate;
    }

    public boolean isTypeBoolean() {
        return typeBoolean;
    }

    public void setTypeBoolean(boolean typeBoolean) {
        this.typeBoolean = typeBoolean;
    }

    public Boolean getTypeNullableBoolean() {
        return typeNullableBoolean;
    }

    public void setTypeNullableBoolean(Boolean typeNullableBoolean) {
        this.typeNullableBoolean = typeNullableBoolean;
    }

    public float getTypeFloat() {
        return typeFloat;
    }

    public void setTypeFloat(float typeFloat) {
        this.typeFloat = typeFloat;
    }

    public Float getTypeNullableFloat() {
        return typeNullableFloat;
    }

    public void setTypeNullableFloat(Float typeNullableFloat) {
        this.typeNullableFloat = typeNullableFloat;
    }

    public double getTypeDouble() {
        return typeDouble;
    }

    public void setTypeDouble(double typeDouble) {
        this.typeDouble = typeDouble;
    }

    public Double getTypeNullableDouble() {
        return typeNullableDouble;
    }

    public void setTypeNullableDouble(Double typeNullableDouble) {
        this.typeNullableDouble = typeNullableDouble;
    }

	//[begin seife autogenerated@


	public static final String PARCELABLE_NAME = "com.uc_mobileapps.tests.sqlite.bo.CommonTypes";
	public static final Parcelable.Creator<CommonTypes> CREATOR = new Parcelable.Creator<CommonTypes>() {

		@Override
		public CommonTypes createFromParcel(Parcel source) 
		{
			CommonTypes instance = new CommonTypes();
			instance.readFromParcel(source);
			return instance;
		}

		@Override
		public CommonTypes[] newArray(int size) {
			return new CommonTypes[size];
		}	
	};

	@Override
	public int describeContents() { //relevant to parcel filedescriptors only, leave zero
		return 0;
	}
	

	public void readFromParcel(Parcel source) {
		String s;
		s=source.readString(); setId((s!=null) ? Long.parseLong(s) : null);
		setTypeBoolean((0x1 & source.readByte()) != 0);
		setTypeByte(source.readByte());
		setTypeDouble(source.readDouble());
		setTypeFloat(source.readFloat());
		setTypeInt(source.readInt());
		setTypeLong(source.readLong());
		s=source.readString(); setTypeNullableBoolean((s!=null) ? Boolean.parseBoolean(s) : null);
		s=source.readString(); setTypeNullableByte((s!=null) ? Byte.parseByte(s) : null);
		s=source.readString(); setTypeNullableDouble((s!=null) ? Double.parseDouble(s) : null);
		s=source.readString(); setTypeNullableFloat((s!=null) ? Float.parseFloat(s) : null);
		s=source.readString(); setTypeNullableInt((s!=null) ? Integer.parseInt(s) : null);
		s=source.readString(); setTypeNullableLong((s!=null) ? Long.parseLong(s) : null);
		s=source.readString(); setTypeNullableShort((s!=null) ? Short.parseShort(s) : null);
		setTypeShort((short)source.readInt());
		setTypeString(source.readString());
		s=source.readString(); setTypeUtilDate((s!=null) ? new java.util.Date(Long.parseLong(s)) : null);
	}


	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeString((getId()!=null) ? Long.toString(getId()) : null);
		dest.writeByte(isTypeBoolean() ? (byte)1 : 0);
		dest.writeByte(getTypeByte());
		dest.writeDouble(getTypeDouble());
		dest.writeFloat(getTypeFloat());
		dest.writeInt(getTypeInt());
		dest.writeLong(getTypeLong());
		dest.writeString((getTypeNullableBoolean()!=null) ? Boolean.toString(getTypeNullableBoolean()) : null);
		dest.writeString((getTypeNullableByte()!=null) ? Byte.toString(getTypeNullableByte()) : null);
		dest.writeString((getTypeNullableDouble()!=null) ? Double.toString(getTypeNullableDouble()) : null);
		dest.writeString((getTypeNullableFloat()!=null) ? Float.toString(getTypeNullableFloat()) : null);
		dest.writeString((getTypeNullableInt()!=null) ? Integer.toString(getTypeNullableInt()) : null);
		dest.writeString((getTypeNullableLong()!=null) ? Long.toString(getTypeNullableLong()) : null);
		dest.writeString((getTypeNullableShort()!=null) ? Short.toString(getTypeNullableShort()) : null);
		dest.writeInt(getTypeShort());
		dest.writeString(getTypeString());
		dest.writeString((getTypeUtilDate()!=null) ? Long.toString(getTypeUtilDate().getTime()) : null);
	}
		//@end seife autogenerated]






}
