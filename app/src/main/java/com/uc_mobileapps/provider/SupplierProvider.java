/**
 * 
 */
package com.uc_mobileapps.provider;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;

import com.uc_mobileapps.db.SupplierDB;
import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.net.Uri;

import com.uc_mobileapps.seifesample02.Supplier;
import com.uc_mobileapps.seifesample02.schema.SupplierSchema;

/**
 * Content provider implementation for com.uc_mobileapps.seifesample02.Supplier * @author ${properties.author}
 */
public class SupplierProvider extends ContentProvider {

	/**
	 * Pass a query limit to the provider
	 */
	public static final String QUERY_PARAMETER_LIMIT = "_limit";

	/**
	 * Pass a having clause to the provider
	 */
	public static final String QUERY_PARAMETER_HAVING = "_having";

	/**
	 * Pass a group by to the provider
	 */
	public static final String QUERY_PARAMETER_GROUP_BY = "_groupby";


	/* (non-Javadoc)
	 * @see android.content.ContentProvider#onCreate()
	 */
	@Override
	public boolean onCreate() {
		if (!seifeCreate()) {
			return false;
		}
		return true;
	}

	//[begin seife autogenerated@
	
	/**
	 * Content-Provider Authority for Uris (is in the demo package for historical reasons)
	 */
	public static final String AUTHORITY = "com.uc_mobileapps.provider";

	/**
	 * Better don't use this directly, use {@link #getContentUriSupplier()} instead
	 */
	public static Uri CONTENT_URI_SUPPLIER = Uri.parse("content://" + AUTHORITY + "/" + SupplierSchema.TBL_SUPPLIER);

	/**
	 * Uri for com.uc_mobileapps.seifesample02.Supplier
	 */
	public static Uri getContentUriSupplier() {
		return CONTENT_URI_SUPPLIER;
	}
	
	/**
	 * Explicit URI configuration
	 */
	public static void setContentUriSupplier(Uri uri) {
		CONTENT_URI_SUPPLIER = uri;
	}


	/**
	 * Code for urimatcher of the content provider
	 */
	protected static final int URI_CODE_SUPPLIER = 0;
	/**
	 * Supplier by id uri
	 */
	protected static final int URI_CODE_SUPPLIER_ID = 1;

	/**
	 * Supplier for batch updates
	 */
	protected static final int URI_CODE_SUPPLIER_NO_NOTIFY_ID = 2;

	

	/**
	 * The database helper class where the table definitions reside
	 */
	private com.uc_mobileapps.db.SupplierDB dbHelper;

	/**
	 * Autogenerated provider onCreate
	 * @see SupplierProvider#onCreate()
	 */
	public boolean seifeCreate() {
		dbHelper = new com.uc_mobileapps.db.SupplierDB(getContext());
		return true;
	}

	/**
	 * Uri Matcher of the content provider
	 */
	private UriMatcher uriMatcher;

	/**
	 * @return
	 */
	protected UriMatcher getUriMatcher() {
		if (uriMatcher == null) {
			uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
 			uriMatcher.addURI(AUTHORITY, SupplierSchema.TBL_SUPPLIER, URI_CODE_SUPPLIER);
			uriMatcher.addURI(AUTHORITY, SupplierSchema.TBL_SUPPLIER + "/#", URI_CODE_SUPPLIER_ID);
			uriMatcher.addURI(AUTHORITY, SupplierSchema.TBL_SUPPLIER + "/batch/#", URI_CODE_SUPPLIER_NO_NOTIFY_ID);
  		}
		return uriMatcher;
	}
	
	/**
	 * (non-Javadoc)
	 */
	@Override
	public String getType(Uri uri) {
		switch (getUriMatcher().match(uri)) {
 
		case URI_CODE_SUPPLIER:
			return ContentResolver.CURSOR_DIR_BASE_TYPE + "/vnd." + Supplier.class.getPackage() + "." + SupplierSchema.TBL_SUPPLIER;
		case URI_CODE_SUPPLIER_ID:
			return ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + Supplier.class.getPackage() + "." + SupplierSchema.TBL_SUPPLIER;
		case URI_CODE_SUPPLIER_NO_NOTIFY_ID:
			return ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + Supplier.class.getPackage() + "." + SupplierSchema.TBL_SUPPLIER;
		}
		return null;
	}

	/**
	 * Inserts a new object to the database
	 * @return the uri of the created object, null if the mandatory check failed 
	 * @see android.content.ContentProvider\#insert(android.net.Uri, android.content.ContentValues)
	 */
	@Override
	public Uri insert(Uri uri, ContentValues values) {
		
		SQLiteDatabase db = dbHelper.getWritableDatabase();
		long rowId;
		switch (getUriMatcher().match(uri))
		{
		case URI_CODE_SUPPLIER:
			if (!SupplierSchema.instance().checkConstraints(values)) {
				return null;
			}
			rowId = db.insert(SupplierSchema.TBL_SUPPLIER, null, values);
			if (rowId > 0) {
				Uri resUri = ContentUris.withAppendedId(uri, rowId);
				getContext().getContentResolver().notifyChange(resUri, null);
				return resUri;
			}
			break;
		case URI_CODE_SUPPLIER_ID: //unimplemented since id is generated
			break;
		}
		return null;
	}

	/* (non-Javadoc)
	 * @see android.content.ContentProvider\#update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
	 */
	@Override
	public int update(Uri uri, ContentValues values, String selection,
			String[] selectionArgs) 
	{
		int rowsAffected = 0;
		SQLiteDatabase db = dbHelper.getWritableDatabase();
		int matchId = getUriMatcher().match(uri);
		String[] primaryKey;
		switch (matchId)
		{
		case URI_CODE_SUPPLIER_ID:
		case URI_CODE_SUPPLIER_NO_NOTIFY_ID:
			primaryKey = new String[] { uri.getQueryParameter(SupplierSchema.COL_ID) };
			rowsAffected = db.update(SupplierSchema.TBL_SUPPLIER, values,  SupplierSchema.COL_ID + " = ?" , primaryKey);
			break;
		default:
			break;
		}
		if (rowsAffected > 0) {
			switch (matchId) {
			case URI_CODE_SUPPLIER_ID:
				getContext().getContentResolver().notifyChange(uri, null);			
				break;
			default: 
				break;
			}
		}	
		return rowsAffected;
	}
	
	/* (non-Javadoc)
	 * @see android.content.ContentProvider\#delete(android.net.Uri, java.lang.String, java.lang.String[])
	 */
	@Override
	public int delete(Uri uri, String selection, String[] selectionArgs) {
		int rowsAffected = 0;

		SQLiteDatabase db = dbHelper.getWritableDatabase();
		String[] primaryKey;
		int matchId = getUriMatcher().match(uri);
		switch (matchId)
		{
		case URI_CODE_SUPPLIER_ID:
		case URI_CODE_SUPPLIER_NO_NOTIFY_ID:
			primaryKey = new String[] { uri.getQueryParameter(SupplierSchema.COL_ID) };
			rowsAffected = db.delete(SupplierSchema.TBL_SUPPLIER,SupplierSchema.COL_ID + " = ?" , primaryKey);
			if (rowsAffected > 0) {
				getContext().getContentResolver().notifyChange(uri, null);			
			}
			break;
		default:
			break;
		}

		if (rowsAffected > 0) {
			switch (matchId) {
			case URI_CODE_SUPPLIER_ID:
				getContext().getContentResolver().notifyChange(uri, null);			
				break;
			default: 
				break;
			}
		}
		return rowsAffected;
	}

	/* (non-Javadoc)
	 * @see android.content.ContentProvider\#query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
	 */
	@Override
	public Cursor query(Uri uri, String[] projection, String selectionParam,
			String[] selectionParamArgs, String sortOrder) {
		StringBuilder selection = new StringBuilder();;
		List<String> selectionArgs = new ArrayList<String>();
		
		String groupBy = uri.getQueryParameter(QUERY_PARAMETER_GROUP_BY);
		String having = uri.getQueryParameter(QUERY_PARAMETER_HAVING);
		String limit = uri.getQueryParameter(QUERY_PARAMETER_LIMIT);
		SQLiteQueryBuilder qb = new SQLiteQueryBuilder();

		int matchId = getUriMatcher().match(uri);
		switch (matchId) {
		case URI_CODE_SUPPLIER:
			qb.setTables(SupplierSchema.TBL_SUPPLIER);
			if (selectionParam != null) {
				selection.append(selectionParam);
			}
			if (selectionParamArgs != null) {
				selectionArgs = Arrays.asList(selectionParamArgs);
			}
					break;
		case URI_CODE_SUPPLIER_ID:
		case URI_CODE_SUPPLIER_NO_NOTIFY_ID:
			qb.setTables(SupplierSchema.TBL_SUPPLIER);
			selection
			.append(SupplierSchema.COL_ID + " = ?");
						selectionArgs.add(uri.getQueryParameter(SupplierSchema.COL_ID));
		break;
		default:
			return null;
		}
				Cursor c = qb.query(dbHelper.getReadableDatabase(), projection, selection.toString(), selectionArgs.toArray(new String[selectionArgs.size()]), groupBy, having, sortOrder, limit);

		c.setNotificationUri(getContext().getContentResolver(), uri);
		return c;
	}
	//@end seife autogenerated]
}
